from django.db import models

# class product inherits the model class
#product is a model
#class name--> table name

class Product(models.Model):
    #defining schema under this class with the help of class atrributes as the field
    #autofield-> integer which increments automatically
    # if no primary key is specified, then django itself gives 'id' as the primary key
    # id here is generated by django itself.
    product_id = models.AutoField
    product_name= models.CharField(max_length=50)
    desc=models.CharField(max_length=300)
    pub_date=models.DateField()
    category=models.CharField(max_length=50,default="")
    sub_category=models.CharField(max_length=50,default="")
    price=models.IntegerField(default=0)
    image=models.ImageField(upload_to="shop/images",default="")

    def __str__(self):
        return self.product_name

#CREATING ANOTHER MODEL FOR THE CONTACT DETAILS TO BE STORED IN THE DATABASE
class Contact(models.Model):
    msg_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=70,default="")
    email = models.CharField(max_length=70,default="")
    phone = models.CharField(max_length=70,default="")
    desc = models.CharField(max_length=70,default="")

    def __str__(self):
        return self.name

# CREATING ANOTHER MODEL FOR THE CHECKOUT PAGE, WHEN THE USER CHECKOUTS ALL THE INFO TO BE STORED IN DATABASE
class orders(models.Model):
    order_id=models.AutoField(primary_key=True)
    items_json=models.CharField(max_length=5000)
    amount=models.IntegerField(default=0)
    name=models.CharField(max_length=90)
    email=models.CharField(max_length=90)
    address=models.CharField(max_length=90)
    address2=models.CharField(max_length=90)
    city=models.CharField(max_length=90)
    state=models.CharField(max_length=90)
    zip_code=models.CharField(max_length=90)
    phone=models.IntegerField()
    class Meta:
        verbose_name_plural = "Orders"

    def __str__(self):
        return self.name

# model to show the details for updates of an order on tracker page
class orderUpdate(models.Model):
    update_id=models.AutoField(primary_key=True)
    order_id=models.IntegerField(default="")
    update_desc=models.CharField(max_length=5000)

    # auto now add means that the timestamp will be having the value of current time
    timestamp=models.DateField(auto_now_add=True)

    def __str__(self):
        return self.update_desc[0:17]+"..."